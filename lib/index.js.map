{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"tesrasdk-ts\"","webpack:///external \"@ledgerhq/hw-transport-u2f\"","webpack:///external \"uuid\"","webpack:///external \"promise-timeout\"","webpack:///external \"@ledgerhq/hw-transport-node-hid\"","webpack:///external \"elliptic\"","webpack:///./src/ledgerTransportNode.ts","webpack:///./src/ledgerProxy.ts","webpack:///./src/ledgerKey.ts","webpack:///./src/ledgerTransportIframe.ts","webpack:///./src/ledgerTransportU2F.ts","webpack:///./src/ledgerKeyDeserializer.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ledgerTransportNode_LedgerTransportNode","LedgerTransportNode","_classCallCheck","this","_createClass","_ref","_asyncToGenerator","regeneratorRuntime","mark","_callee","paths","wrap","_context","prev","next","hw_transport_node_hid_default","a","isSupported","sent","Error","list","length","open","delegate","setDebugMode","setScrambleKey","setExchangeTimeout","stop","apply","arguments","_ref2","_callee2","_context2","close","_ref3","_callee3","params","data","statusList","resulBuffer","_context3","send","cla","ins","p1","p2","Buffer","from","abrupt","toString","_x","_x2","_x3","transportInternal","setLedgerTransport","transport","isLedgerSupported","ledgerProxy_asyncToGenerator","getPublicKey","t0","console","log","index","neo","path","result","BIP44","VALID_STATUS","substring","evalTransportError","finish","computesSignature","chunks","response","match","convertDerToHex","_x4","_x5","undefined","acctNumber","padStart","ss","external_tesrasdk_ts_","StringReader","read","readNextBytes","map","substr","join","MSG_TOO_BIG","APP_CLOSED","TX_DENIED","TX_PARSE_ERR","err","statusCode","message","CurveLabel","KeyParameters","KeyType","PrivateKey","PublicKey","Signature","SignatureScheme","ledgerKey_asyncToGenerator","uncompressed","ec","keyPair","compressed","external_elliptic_","SECP256R1","preset","keyFromPublic","getPublic","createExisting","pKey","privateKey","ECDSA","ledgerKey","publicKey","algorithm","parameters","type","sign","msg","schema","publicKeyId","signAsync","signed","ECDSAwithSHA256","isSchemaSupported","serializeUnsignedData","serializeJson","label","external","decrypt","keyphrase","address","salt","encrypt","ledgerTransportIframe_LedgerTransportIframe","LedgerTransportIframe","forwarderUrl","debug","ledgerTransportIframe_classCallCheck","ledgerTransportIframe_createClass","ledgerTransportIframe_asyncToGenerator","channel","iframe","createChannel","_slicedToArray","sendToChannel","id","external_uuid_","method","_ref4","closeChannel","_ref5","_ref6","_callee4","promise","_context4","Promise","resolve","reject","MessageChannel","document","createElement","port1","addEventListener","ready","removeEventListener","error","start","src","setAttribute","contentWindow","postMessage","port2","body","appendChild","external_promise_timeout_","_x6","_ref7","_callee5","_context5","removeChild","_x7","_x8","_ref8","_callee6","timeoutMs","_context6","listener","_x10","_x11","ledgerTransportU2F_LedgerTransportU2F","LedgerTransportU2F","ledgerTransportU2F_classCallCheck","ledgerTransportU2F_createClass","ledgerTransportU2F_asyncToGenerator","hw_transport_u2f_default","ledgerKeyDeserializer_LedgerKeyDeserializer","LedgerKeyDeserializer","ledgerKeyDeserializer_classCallCheck","ledgerKeyDeserializer_createClass","json"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","module.exports = require(\"tesrasdk-ts\");","module.exports = require(\"@ledgerhq/hw-transport-u2f\");","module.exports = require(\"uuid\");","module.exports = require(\"promise-timeout\");","module.exports = require(\"@ledgerhq/hw-transport-node-hid\");","module.exports = require(\"elliptic\");","import LedgerNode from '@ledgerhq/hw-transport-node-hid';\nimport { LedgerTransport, SendParams } from './ledgerTransport';\n\n/**\n * Standard implementation of Ledger transport using Node.JS HID.\n *\n * Usable in Node.JS or Electron environment.\n */\nexport class LedgerTransportNode implements LedgerTransport {\n    private delegate: any;\n\n    /**\n     * Connects to the Ledger HW and creates transport.\n     *\n     * Caution: Transport needs to be close before creating new one.\n     * Otherwise the new one might fail.\n     */\n    async open() {\n        const supported = await LedgerNode.isSupported();\n        if (!supported) {\n            throw new Error('Your computer does not support the ledger!');\n        }\n\n        const paths = await LedgerNode.list();\n        if (paths.length === 0) {\n            throw new Error('USB Error: No device found.');\n        }\n\n        this.delegate = await LedgerNode.open(paths[0]);\n        this.delegate.setDebugMode(true);\n        this.delegate.setScrambleKey(null);\n        this.delegate.setExchangeTimeout(5000);\n    }\n\n    /**\n     * Closes the transport connection to the Ledger HW.\n     */\n    async close() {\n        await this.delegate.close();\n    }\n\n    /**\n     * Sends data with params to the Ledger HW.\n     *\n     * @param params Send Params\n     * @param msg - Hex encoded data\n     * @param statusList List of valid status codes\n     * @return Hex encoded result from Ledger\n     */\n    async send(params: SendParams, data: string, statusList: number[]): Promise<string> {\n        const resulBuffer: Buffer = await this.delegate.send(\n            params.cla,\n            params.ins,\n            params.p1,\n            params.p2,\n            Buffer.from(data, 'hex'),\n            statusList\n        );\n\n        return resulBuffer.toString('hex');\n    }\n}\n","/*\n * Copyright (C) 2019-2020 The TesraSupernet Authors\n * This file is part of The TesraSupernet library.\n *\n * The TesraSupernet is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The TesraSupernet is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { utils } from 'tesrasdk-ts';\nimport { LedgerTransport } from './ledgerTransport';\nimport { LedgerTransportNode } from './ledgerTransportNode';\n\nlet transportInternal: LedgerTransport = new LedgerTransportNode();\n\n/**\n * Sets the instance of ledger transport (Node/U2F/IFrame).\n * @param t Ledger transport\n */\nexport function setLedgerTransport(transport: LedgerTransport) {\n    transportInternal = transport;\n}\n\n/**\n * Detects if Ledger is installed, connected and NEO app is running.\n *\n */\nexport async function isLedgerSupported() {\n    try {\n        await getPublicKey(0, false);\n        return true;\n    } catch (e) {\n        // tslint:disable-next-line:no-console\n        console.log(e);\n        return false;\n    }\n}\n\n/**\n * Retrieves the public key corresponding to BIP44 index.\n *\n * @param index Index of the public key\n */\nexport async function getPublicKey(index: number, neo: boolean) {\n    await transportInternal.open();\n\n    try {\n        const path = BIP44(index, neo);\n        const params = { cla: 0x80, ins: 0x04, p1: 0x00, p2: 0x00 };\n        const result = await transportInternal.send(params, path, [VALID_STATUS]);\n        return result.substring(0, 130);\n    } catch (err) {\n        throw evalTransportError(err);\n    } finally {\n        await transportInternal.close();\n    }\n}\n\n/**\n * Computes ECDSA signature of the data from Ledger using index.\n *\n */\nexport async function computesSignature(index: number, neo: boolean, data: string): Promise<string> {\n    await transportInternal.open();\n\n    try {\n        const path = BIP44(index, neo);\n        data += path;\n\n        const chunks = data.match(/.{1,510}/g) || [];\n        if (chunks.length === 0) {\n            throw new Error(`Invalid data provided: ${data}`);\n        }\n\n        let response = null;\n        for (let i = 0; i < chunks.length; i++) {\n\n            const params = {\n                cla: 0x80,\n                ins: 0x02,\n                p1: i === chunks.length - 1 ? 0x80 : 0x00,\n                p2: 0x00\n            };\n\n            response = await transportInternal.send(params, chunks[i], [VALID_STATUS]);\n        }\n\n        if (response === null || response === '9000') {\n            throw new Error('No more data but Ledger did not return signature!');\n        }\n\n        return convertDerToHex(response);\n    } catch (err) {\n        throw evalTransportError(err);\n    } finally {\n        await transportInternal.close();\n    }\n}\n\n/**\n * Constructs BIP44 address path from index.\n *\n * @param index Address index\n * @param neo Build neo compatible bip\n */\nfunction BIP44(index: number = 0, neo: boolean) {\n    const acctNumber = index.toString(16).padStart(8, '0');\n    const coin = neo ? '80000378' : '80000400';\n    return (\n        '8000002C' +      // purpose\n        coin +            // coin type\n        '80000000' +      // account\n        '00000000' +      // change (external)\n        acctNumber        // Zero padded account index\n    );\n}\n\n/**\n * Converts DER encoded signature to hex encoded.\n *\n * @param response Signature in DER format\n * @return Signature in hex format\n */\nfunction convertDerToHex(response: string): string {\n    const ss = new utils.StringReader(response);\n    // The first byte is format. It is usually 0x30 (SEQ) or 0x31 (SET)\n    // The second byte represents the total length of the DER module.\n    ss.read(2);\n    // Now we read each field off\n    // Each field is encoded with a type byte, length byte followed by the data itself\n    ss.read(1); // Read and drop the type\n    const r = ss.readNextBytes();\n    ss.read(1);\n    const s = ss.readNextBytes();\n\n    // We will need to ensure both integers are 32 bytes long\n    const integers = [r, s].map((i) => {\n        if (i.length < 64) {\n            i = i.padStart(64, '0');\n        }\n        if (i.length > 64) {\n            i = i.substr(-64);\n        }\n        return i;\n    });\n\n    return integers.join('');\n}\n\nconst VALID_STATUS = 0x9000;\nconst MSG_TOO_BIG = 0x6d08;\nconst APP_CLOSED = 0x6e00;\nconst TX_DENIED = 0x6985;\nconst TX_PARSE_ERR = 0x6d07;\n\n/**\n * Adds user friendly message to Error object.\n * @param err Error object\n */\nfunction evalTransportError(err: any) {\n    switch (err.statusCode) {\n    case APP_CLOSED:\n        err.message = 'Your NEO app is closed! Please login.';\n        break;\n    case MSG_TOO_BIG:\n        err.message = 'Your transaction is too big for the ledger to sign!';\n        break;\n    case TX_DENIED:\n        err.message = 'You have denied the transaction on your ledger.';\n        break;\n    case TX_PARSE_ERR:\n        err.message = 'Error parsing transaction. Make sure your NEO app version is up to date.';\n        break;\n    }\n    return err;\n}\n","/*\n * Copyright (C) 2019-2020 The TesraSupernet Authors\n * This file is part of The TesraSupernet library.\n *\n * The TesraSupernet is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The TesraSupernet is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport * as elliptic from 'elliptic';\nimport { Crypto } from 'tesrasdk-ts';\nimport { computesSignature, getPublicKey } from './ledgerProxy';\n\nimport Address = Crypto.Address;\nimport CurveLabel = Crypto.CurveLabel;\nimport JsonKey = Crypto.JsonKey;\nimport KeyParameters = Crypto.KeyParameters;\nimport KeyType = Crypto.KeyType;\nimport PrivateKey = Crypto.PrivateKey;\nimport PublicKey = Crypto.PublicKey;\nimport Signable = Crypto.Signable;\nimport Signature = Crypto.Signature;\nimport SignatureScheme = Crypto.SignatureScheme;\n\nexport interface LedgerKey extends PrivateKey {\n    publicKey: PublicKey;   // transient\n\n    index: number;\n    neo: boolean;\n\n    type: 'LEDGER';\n}\n\nexport async function create(index: number, neo: boolean): Promise<LedgerKey> {\n    const uncompressed = await getPublicKey(index, neo);\n\n    const ec = new elliptic.ec(CurveLabel.SECP256R1.preset);\n    const keyPair = ec.keyFromPublic(uncompressed, 'hex');\n    const compressed = keyPair.getPublic(true, 'hex');\n\n    return createExisting(index, neo, compressed);\n}\n\nexport function createExisting(index: number, neo: boolean, pKey: string): LedgerKey {\n    const privateKey = new PrivateKey('', KeyType.ECDSA, new KeyParameters(CurveLabel.SECP256R1));\n    const ledgerKey = privateKey as LedgerKey;\n\n    ledgerKey.index = index;\n    ledgerKey.neo = neo;\n    ledgerKey.publicKey = new PublicKey(pKey, privateKey.algorithm, privateKey.parameters);\n    ledgerKey.type = 'LEDGER';\n\n    /**\n     * Synchronious signing is not supported with Ledger. Use signAsync instead.\n     */\n    ledgerKey.sign = function sign(msg: string | Signable, schema?: SignatureScheme, publicKeyId?: string): Signature {\n        throw new Error('Synchronious signing is not supported with Ledger.');\n    };\n\n    /**\n     * Signs the data with the Ledger HW.\n     *\n     * If the signature schema is not provided, the default schema for this key type is used.\n     *\n     * @param msg Hex encoded input data\n     * @param schema Signing schema to use\n     * @param publicKeyId Id of public key\n     */\n    // tslint:disable-next-line:max-line-length\n    ledgerKey.signAsync = async function signAsync(msg: string | Signable, schema?: SignatureScheme, publicKeyId?: string): Promise<Signature> {\n        if (schema === undefined) {\n            schema = SignatureScheme.ECDSAwithSHA256;\n        }\n\n        if (!this.isSchemaSupported(schema)) {\n            throw new Error('Signature schema does not match key type.');\n        }\n\n        // retrieves content to sign if not provided directly\n        if (typeof msg !== 'string') {\n            msg = msg.serializeUnsignedData();\n        } else {\n            throw new Error('Only Signable signature is supported in ledger');\n        }\n\n        const signed = await computesSignature(this.index, neo, msg);\n\n        return new Signature(schema, signed, publicKeyId);\n    };\n\n    /**\n     * Derives Public key out of Private key.\n     *\n     * Uses cached public key, so no further communication with the Ledger HW is necessary.\n     */\n    ledgerKey.getPublicKey = function getPublicKey2(): PublicKey {\n        return this.publicKey;\n    };\n\n    /**\n     * Only ECDSAwithSHA256 is supported for Ledger key.\n     */\n    ledgerKey.isSchemaSupported = function isSchemaSupported(schema: SignatureScheme): boolean {\n        return schema === SignatureScheme.ECDSAwithSHA256;\n    };\n\n    /**\n     * Gets JSON representation of the Ledger Key.\n     */\n    ledgerKey.serializeJson = function serializeJson(): JsonKey {\n        return {\n            algorithm: this.algorithm.label,\n            external: {\n                index: this.index,\n                neo: this.neo,\n                pKey: this.publicKey.key,\n                type: 'LEDGER'\n            },\n            parameters: this.parameters.serializeJson(),\n            key: null\n        };\n    };\n\n    /**\n     * Decryption is not supported for Ledger Key. This operation is NOOP.\n     */\n    ledgerKey.decrypt = function decrypt(keyphrase: string, address: Address, salt: string, params?: any): PrivateKey {\n        return this;\n    };\n\n    /**\n     * Encryption is not supported for Ledger Key. This operation is NOOP.\n     */\n    ledgerKey.encrypt = function encrypt(keyphrase: string, address: Address, salt: string, params?: any): PrivateKey {\n        return this;\n    };\n\n    return ledgerKey;\n}\n","import { timeout as timeoutFunc } from 'promise-timeout';\nimport { v4 as uuid } from 'uuid';\nimport { LedgerTransport, SendParams } from './ledgerTransport';\n\n/**\n * Alternative implementation of Ledger communication using embedded Iframe from HTTPS location.\n *\n * This is needed in case the Application is not server through HTTPS or is a browser extention.\n */\nexport class LedgerTransportIframe implements LedgerTransport {\n    private debug: boolean;\n    private forwarderUrl: string;\n    private channel: MessageChannel;\n    private iframe: HTMLIFrameElement;\n\n    /**\n     * Creates Iframe transport\n     * @param forwarderUrl HTTPS url of Forwarder\n     * @param debug Enable debug messages\n     */\n    constructor(forwarderUrl: string, debug: boolean = false) {\n        this.forwarderUrl = forwarderUrl;\n        this.debug = debug;\n    }\n\n    /**\n     * Connects to the Ledger HW and creates transport.\n     *\n     * Caution: Transport needs to be close before creating new one.\n     * Otherwise the new one might fail.\n     */\n    async open() {\n        const [channel, iframe] = await createChannel(this.forwarderUrl, this.debug);\n\n        this.channel = channel;\n        this.iframe = iframe;\n        await sendToChannel(this.channel, { id: uuid(), method: 'open' });\n    }\n\n    /**\n     * Closes the transport connection to the Ledger HW.\n     */\n    async close() {\n        await sendToChannel(this.channel, { id: uuid(), method: 'close' });\n        await closeChannel(this.channel, this.iframe);\n    }\n\n    /**\n     * Sends data with params to the Ledger HW.\n     *\n     * @param params Send Params\n     * @param msg - Hex encoded data\n     * @param statusList List of valid status codes\n     * @return Hex encoded result from Ledger\n     */\n    async send(params: SendParams, data: string, statusList: number[]): Promise<string> {\n        const response = await sendToChannel(this.channel, {\n            id: uuid(),\n            method: 'send',\n            cla: params.cla,\n            ins: params.ins,\n            p1: params.p1,\n            p2: params.p2,\n            data,\n            statusList\n        }, 30000);\n\n        return response.result;\n    }\n}\n\nexport interface ChannelMessage {\n    id: string;\n}\n\nexport interface ChannelResponse extends ChannelMessage {\n    result: string;\n}\n\nexport async function createChannel(forwarderUrl: string, debug: boolean) {\n    const promise = new Promise<[MessageChannel, HTMLIFrameElement]>((resolve, reject) => {\n        const channel: MessageChannel = new MessageChannel();\n        const iframe = document.createElement('iframe');\n\n        const ready = (message: any) => {\n            if (debug) {\n                // tslint:disable-next-line:no-console\n                console.log('Received ready message from Iframe.', message);\n            }\n\n            if (message.data === 'ready') {\n                channel.port1.removeEventListener('message', ready);\n                resolve([channel, iframe]);\n            } else {\n                if (debug) {\n                    // tslint:disable-next-line:no-console\n                    console.error('First event on Iframe port was not \"ready\"');\n                }\n            }\n        };\n        channel.port1.addEventListener('message', ready);\n        channel.port1.start();\n\n        iframe.src = forwarderUrl;\n        iframe.setAttribute('style', 'display:none');\n        iframe.addEventListener('load', () => {\n            if (debug) {\n                // tslint:disable-next-line:no-console\n                console.log('Load event of Iframe fired.');\n            }\n\n            if (iframe == null || iframe.contentWindow == null) {\n                reject('Can not find Ledger forwarder IFrame.');\n                return;\n            }\n\n            iframe.contentWindow.postMessage('init', '*', [channel.port2]);\n        });\n        document.body.appendChild(iframe);\n    });\n\n    return timeoutFunc(promise, 2000);\n}\n\nexport async function closeChannel(channel: MessageChannel, iframe: HTMLIFrameElement) {\n    const promise = new Promise<void>((resolve, reject) => {\n        if (iframe == null || iframe.contentWindow == null) {\n            reject('Can not find Ledger forwarder IFrame');\n            return;\n        }\n\n        iframe.contentWindow.postMessage('close', '*');\n        channel.port1.close();\n        document.body.removeChild(iframe);\n        resolve();\n    });\n\n    return timeoutFunc(promise, 2000);\n}\n\nexport async function sendToChannel<T extends ChannelMessage>(channel: MessageChannel, msg: T, timeoutMs = 2000) {\n    const promise = new Promise<ChannelResponse>((resolve) => {\n\n        const listener = (result: MessageEvent) => {\n            const data = result.data as ChannelResponse;\n\n            if (data.id === msg.id) {\n                channel.port1.removeEventListener('message', listener);\n                resolve(data);\n            }\n        };\n\n        channel.port1.addEventListener('message', listener);\n        channel.port1.postMessage(msg);\n    });\n\n    return timeoutFunc(promise, timeoutMs);\n}\n","import LedgerNode from '@ledgerhq/hw-transport-u2f';\nimport { LedgerTransport, SendParams } from './ledgerTransport';\n\n/**\n * Standard implementation of Ledger transport using Browser U2F protocol.\n *\n * The Chrome extension implementing U2F protocol requires the application to be served over HTTPS.\n * In other cases use LedgerTransportIframe.\n */\nexport class LedgerTransportU2F implements LedgerTransport {\n    private delegate: any;\n\n    /**\n     * Connects to the Ledger HW and creates transport.\n     *\n     * Caution: Transport needs to be close before creating new one.\n     * Otherwise the new one might fail.\n     */\n    async open() {\n        const supported = await LedgerNode.isSupported();\n        if (!supported) {\n            throw new Error('Your computer does not support the ledger!');\n        }\n\n        const paths = await LedgerNode.list();\n        if (paths.length === 0) {\n            throw new Error('USB Error: No device found.');\n        }\n\n        this.delegate = await LedgerNode.open(paths[0]);\n        this.delegate.setDebugMode(true);\n        this.delegate.setScrambleKey('TST');\n        this.delegate.setExchangeTimeout(5000);\n    }\n\n    /**\n     * Closes the transport connection to the Ledger HW.\n     */\n    async close() {\n        await this.delegate.close();\n    }\n\n    /**\n     * Sends data with params to the Ledger HW.\n     *\n     * @param params Send Params\n     * @param msg - Hex encoded data\n     * @param statusList List of valid status codes\n     * @return Hex encoded result from Ledger\n     */\n    async send(params: SendParams, data: string, statusList: number[]): Promise<string> {\n        const resulBuffer: Buffer = await this.delegate.send(\n            params.cla,\n            params.ins,\n            params.p1,\n            params.p2,\n            Buffer.from(data, 'hex'),\n            statusList\n        );\n\n        return resulBuffer.toString('hex');\n    }\n}\n","/*\n * Copyright (C) 2019-2020 The TesraSupernet Authors\n * This file is part of The TesraSupernet library.\n *\n * The TesraSupernet is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * The TesraSupernet is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with The TesraSupernet.  If not, see <http://www.gnu.org/licenses/>.\n */\nimport { Crypto } from 'tesrasdk-ts';\nimport JsonKey = Crypto.JsonKey;\nimport KeyDeserializer = Crypto.KeyDeserializer;\nimport PrivateKey = Crypto.PrivateKey;\nimport { createExisting } from './ledgerKey';\n\n/**\n * Ledger private key deserializer.\n */\nexport class LedgerKeyDeserializer implements KeyDeserializer {\n    getType(): string {\n        return 'LEDGER';\n    }\n\n    deserialize(json: JsonKey): PrivateKey {\n        return createExisting(json.external.index, json.external.neo, json.external.pKey);\n    }\n}\n"],"sourceRoot":""}